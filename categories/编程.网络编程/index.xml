<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程.网络编程 on Zzz记忆</title><link>https://zfunnily.github.io/categories/%E7%BC%96%E7%A8%8B.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link><description>Recent content in 编程.网络编程 on Zzz记忆</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 29 Feb 2024 00:59:08 +0000</lastBuildDate><atom:link href="https://zfunnily.github.io/categories/%E7%BC%96%E7%A8%8B.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>CCnet | 单线程reactor演变为多线程</title><link>https://zfunnily.github.io/2020/12/ccnet/</link><pubDate>Wed, 30 Dec 2020 09:19:41 +0000</pubDate><guid>https://zfunnily.github.io/2020/12/ccnet/</guid><description>ccnet从单线程演变为多线程 ccnet现状： epoll linux平台 事件循环 单线程 reactor 监听和新连接的事件都在主线程中 单线程的ccnet ccnet的单线程的角色： EventLoop: 整个事件循环。 EPollPoller: 负责事件的收集。 Channel</description></item><item><title>五种网络IO模型总结</title><link>https://zfunnily.github.io/2020/12/iomodels/</link><pubDate>Mon, 28 Dec 2020 11:57:04 +0000</pubDate><guid>https://zfunnily.github.io/2020/12/iomodels/</guid><description>概述 在网络上看到很多关于阻塞IO、非阻塞IO、同步IO、异步IO的例子，总觉得写的过于复杂并且让人难以理解。于是我把我自己把这几个概念的理解写下来以供参考。 POSIX POSIX(可移植操作系统接口)把同步IO</description></item><item><title>CCnet | 一个reactor单线程网络库</title><link>https://zfunnily.github.io/2020/12/ccnetone/</link><pubDate>Sun, 27 Dec 2020 18:41:25 +0000</pubDate><guid>https://zfunnily.github.io/2020/12/ccnetone/</guid><description>缘由 最近在研究陈硕的网络库muduo，是一个基于reactor架构的网络库。我对网络库的感觉是易用，但是内容庞大，依赖颇多。比如boost网络库里面的一些语法让人生畏。关于reactor和proact</description></item><item><title>TCP/IP | 大量TIME_WAIT对线上业务的影响</title><link>https://zfunnily.github.io/2020/10/%E5%A4%A7%E9%87%8FTIME_WAIT%E5%AF%B9%E7%BA%BF%E4%B8%8A%E4%B8%9A%E5%8A%A1%E7%9A%84%E5%BD%B1%E5%93%8D/</link><pubDate>Sat, 10 Oct 2020 16:46:34 +0000</pubDate><guid>https://zfunnily.github.io/2020/10/%E5%A4%A7%E9%87%8FTIME_WAIT%E5%AF%B9%E7%BA%BF%E4%B8%8A%E4%B8%9A%E5%8A%A1%E7%9A%84%E5%BD%B1%E5%93%8D/</guid><description>TCP的三次握手和四次挥手 TIME_WAIT概述 TIME_WAIT 状态： TCP 连接中，主动关闭连接的一方出现的状态；（收到 FIN 命令，进入 TIME_WAIT 状态，并返回 ACK 命令） 保持 2 个 MSL 时间，即，4 分钟 ；（MSL 为 2 分钟） TCP 连接建立后，「主</description></item></channel></rss>