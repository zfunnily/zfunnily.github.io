<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>游戏开发 on Zzz记忆</title>
    <link>https://zfunnily.github.io/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 游戏开发 on Zzz记忆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 23 Dec 2021 16:37:44 +0800</lastBuildDate>
    
	<atom:link href="https://zfunnily.github.io/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A*算法 | Lua版本</title>
      <link>https://zfunnily.github.io/2021/12/astar/</link>
      <pubDate>Thu, 23 Dec 2021 16:37:44 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/2021/12/astar/</guid>
      <description>A*算法思路 寻路步骤 从起点A开始, 把它作为待处理的方格存入一个&amp;quot;开启列表&amp;rdquo;, 开启列表就是一个等待检查方格的列表. 寻找起点A周围可以到达的方格, 将它们放入&amp;quot;开启列表&amp;rd</description>
    </item>
    
    <item>
      <title>FPS游戏 | 实现移动功能</title>
      <link>https://zfunnily.github.io/2021/09/move/</link>
      <pubDate>Sun, 12 Sep 2021 20:43:34 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/2021/09/move/</guid>
      <description>三种实现FPS Controller的区别 Transform Translate 允许移动物理，但无物理碰撞 Rigid body + Capsule Collider 符合物理学 不会鬼穿墙 无法滞空运动 可与Physics Object 交互 Charactor Controller 不会鬼穿墙 提供的API相对多 无法与Physic objects</description>
    </item>
    
    <item>
      <title>《仙剑奇侠传》编译运行</title>
      <link>https://zfunnily.github.io/2021/03/gamexian/</link>
      <pubDate>Sun, 21 Mar 2021 10:44:58 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2021/03/gamexian/</guid>
      <description>概述 今天在github上找到了《仙剑奇侠传》的rpg单机游戏sdlpal，sdlpal 是一个开源项目，基于sdl把仙剑奇侠传重写了一遍。 下面是我的编译过程总结。 环境 win10- sdl1.2- sdlpal- vs2017- DirectX SDK10 下载sdlpal $ git clone https://github.com.cnpmjs.org/sdlpal/sdlpal.git</description>
    </item>
    
    <item>
      <title>Lastbattle | 游戏场景服务器SS解析</title>
      <link>https://zfunnily.github.io/2021/01/lastbattle/</link>
      <pubDate>Sat, 02 Jan 2021 23:19:58 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2021/01/lastbattle/</guid>
      <description>游戏场景服务器概况 指令对应的处理handle的文件：SSBattleMgr.cpp 创建战场 指令： eMsgToSSFromCS_CreateBattle GC服务器发往SS fromCS 收到中心服务器CS创建站场的指令，在函数INT32 CSSBattleMgr::OnMsgFromCS_CreateBattle(const char* pData, int n32DataLengt</description>
    </item>
    
    <item>
      <title>LastBattle | 登录流程(LS &amp; BS &amp; GS)</title>
      <link>https://zfunnily.github.io/2020/11/lastbattlelogin/</link>
      <pubDate>Fri, 20 Nov 2020 17:27:08 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/11/lastbattlelogin/</guid>
      <description>登录流程 根据上一篇文章中的登录流程,我在工程中找到了相应的代码并记录了下来 登录服务代码解析 监听端口：49997 供BS服务连接 监听端口：49996 供客户端连接 CIocpCtrl：IOCP控制类 多线程循环</description>
    </item>
    
    <item>
      <title>LastBattle | 服务架构</title>
      <link>https://zfunnily.github.io/2020/11/lastbattleserver/</link>
      <pubDate>Fri, 20 Nov 2020 17:24:32 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/11/lastbattleserver/</guid>
      <description>服务器架构简图如下: 连线说明： 实线：表示客户端登录流程，①②③④⑤表示登录流程，详细解释见下文。 虚线：表示服务器间的连接，虚线箭头指向监听方。 架构说明： |英文名称|简称|中文名称|功能简介|单个大区需</description>
    </item>
    
    <item>
      <title>LastBattle | 安装部署笔记</title>
      <link>https://zfunnily.github.io/2020/11/lastbattleone/</link>
      <pubDate>Mon, 16 Nov 2020 06:49:49 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/11/lastbattleone/</guid>
      <description>环境准备 win10 服务器：vs2010 / 数据库 mysql5.7 清华大学mysql镜像网站:https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.7/ 客户端</description>
    </item>
    
  </channel>
</rss>