<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程.UnityShader on Zzz记忆</title><link>https://zfunnily.github.io/categories/%E7%BC%96%E7%A8%8B.UnityShader/</link><description>Recent content in 编程.UnityShader on Zzz记忆</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 12 Mar 2024 00:59:12 +0000</lastBuildDate><atom:link href="https://zfunnily.github.io/categories/%E7%BC%96%E7%A8%8B.UnityShader/index.xml" rel="self" type="application/rss+xml"/><item><title>URP 不透明/半透明物体的折射</title><link>https://zfunnily.github.io/2022/05/refraction/</link><pubDate>Tue, 17 May 2022 11:30:48 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/refraction/</guid><description>折射 应用场景 水池 玻璃 热空气(热扭曲) GrabPass + CubeMap 《Unity3D Shader入门精要》第十章介绍了，模拟实现折射效果有两种 使用cubemap: 我认为太麻烦.需要的贴图太多。也没有找到其他合适的使用场景，遂搁</description></item><item><title>URP 不透明/半透明物体的折射</title><link>https://zfunnily.github.io/2022/05/refraction/</link><pubDate>Tue, 17 May 2022 11:30:48 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/refraction/</guid><description>折射 应用场景 水池 玻璃 热空气(热扭曲) GrabPass + CubeMap 《Unity3D Shader入门精要》第十章介绍了，模拟实现折射效果有两种 使用cubemap: 我认为太麻烦.需要的贴图太多。也没有找到其他合适的使用场景，遂搁</description></item><item><title>《Unity Shader入门精要》第八章笔记 | 透明度</title><link>https://zfunnily.github.io/2022/05/shaderalpha/</link><pubDate>Sat, 07 May 2022 17:17:18 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/shaderalpha/</guid><description>渲染顺序 名称 队列索引号 描 述 Background 1000 这个渲染队列会在任何其他队列之前被渲染，我们通常使用该队列来渲染那些需要绘制在背景上的物体 Geometry 2000 默认的渲染队列，大多数物体都使用这个队列。不透明物体使用这个队列 AlphaTest 2450 需要透明</description></item><item><title>《Unity Shader入门精要》第八章笔记 | 透明度</title><link>https://zfunnily.github.io/2022/05/shaderalpha/</link><pubDate>Sat, 07 May 2022 17:17:18 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/shaderalpha/</guid><description>渲染顺序 名称 队列索引号 描 述 Background 1000 这个渲染队列会在任何其他队列之前被渲染，我们通常使用该队列来渲染那些需要绘制在背景上的物体 Geometry 2000 默认的渲染队列，大多数物体都使用这个队列。不透明物体使用这个队列 AlphaTest 2450 需要透明</description></item><item><title>《Unity Shader入门精要》第六章笔记 | 基础光照</title><link>https://zfunnily.github.io/2022/05/shaderlighting/</link><pubDate>Sat, 07 May 2022 16:22:40 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/shaderlighting/</guid><description>我们是如何看到这个世界的 光源: 在光学里，我们使用辐照度 （irradiance） 来量化光 物体的吸收和散射: 光线由光源发射出来后，就会与一些物体相交 着色: 根据材质属性（如漫反射属性等）、光源信息（如光源方</description></item><item><title>《Unity Shader入门精要》第六章笔记 | 基础光照</title><link>https://zfunnily.github.io/2022/05/shaderlighting/</link><pubDate>Sat, 07 May 2022 16:22:40 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/shaderlighting/</guid><description>我们是如何看到这个世界的 光源: 在光学里，我们使用辐照度 （irradiance） 来量化光 物体的吸收和散射: 光线由光源发射出来后，就会与一些物体相交 着色: 根据材质属性（如漫反射属性等）、光源信息（如光源方</description></item><item><title>《Unity Shader入门精要》第五章笔记 | 开始shader练习</title><link>https://zfunnily.github.io/2022/05/shaderbase/</link><pubDate>Sat, 07 May 2022 10:22:33 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/shaderbase/</guid><description>一个简单的顶点/片元着色器 代码 Shader &amp;#34;Unity Shaders Book/Chapter 5/Simple Shader&amp;#34; { Properties { // 声明一个Color类型的属性 _Color (&amp;#34;Color Tint&amp;#34;, Color) = (1.0,1.0,1.0,1.0) } SubShader { Pass { CGPROGRAM #pragma vertex vert #pragma fragment frag // 在Cg代码中，我们需要定义一个与属性名称和类型都匹配的变量 fixed4 _Color; // 使用一个结构体来定义</description></item><item><title>《Unity Shader入门精要》第五章笔记 | 开始shader练习</title><link>https://zfunnily.github.io/2022/05/shaderbase/</link><pubDate>Sat, 07 May 2022 10:22:33 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/shaderbase/</guid><description>一个简单的顶点/片元着色器 代码 Shader &amp;#34;Unity Shaders Book/Chapter 5/Simple Shader&amp;#34; { Properties { // 声明一个Color类型的属性 _Color (&amp;#34;Color Tint&amp;#34;, Color) = (1.0,1.0,1.0,1.0) } SubShader { Pass { CGPROGRAM #pragma vertex vert #pragma fragment frag // 在Cg代码中，我们需要定义一个与属性名称和类型都匹配的变量 fixed4 _Color; // 使用一个结构体来定义</description></item><item><title>MAC平台几何着色器不生效</title><link>https://zfunnily.github.io/2022/05/geometry/</link><pubDate>Thu, 05 May 2022 16:49:29 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/geometry/</guid><description>问题 MAC平台几何着色器不生效 解决步骤 unity shaderlab 怎么设置以至于支持几何着色器 找原因，设置 编译目标级别，#pragma target 4.0, 不管用 看到一句话，Unity 在 Metal 图形上支持曲面细分着色器，但 Metal 不支持几何着色器 找到ma</description></item><item><title>MAC平台几何着色器不生效</title><link>https://zfunnily.github.io/2022/05/geometry/</link><pubDate>Thu, 05 May 2022 16:49:29 +0800</pubDate><guid>https://zfunnily.github.io/2022/05/geometry/</guid><description>问题 MAC平台几何着色器不生效 解决步骤 unity shaderlab 怎么设置以至于支持几何着色器 找原因，设置 编译目标级别，#pragma target 4.0, 不管用 看到一句话，Unity 在 Metal 图形上支持曲面细分着色器，但 Metal 不支持几何着色器 找到ma</description></item><item><title>ShaderLab常用函数</title><link>https://zfunnily.github.io/2022/04/shaderfunc/</link><pubDate>Wed, 20 Apr 2022 15:41:29 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shaderfunc/</guid><description>数学函数 cg/hlsl函数 功能描述 dot(A,B) 点积, 点积结果为标量，主要用于求向量的夹角或b向量在a向量上的投影 cross(A,B) 叉积, 叉积结果为向量，结果与这两个向量组成的平面垂直。主要用于3D图形学 mul(M, N) 矩阵M和矩阵N的积 mul(M,</description></item><item><title>ShaderLab常用函数</title><link>https://zfunnily.github.io/2022/04/shaderfunc/</link><pubDate>Wed, 20 Apr 2022 15:41:29 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shaderfunc/</guid><description>数学函数 cg/hlsl函数 功能描述 dot(A,B) 点积, 点积结果为标量，主要用于求向量的夹角或b向量在a向量上的投影 cross(A,B) 叉积, 叉积结果为向量，结果与这两个向量组成的平面垂直。主要用于3D图形学 mul(M, N) 矩阵M和矩阵N的积 mul(M,</description></item><item><title>UnityCG.cginc中常用函数</title><link>https://zfunnily.github.io/2022/04/cginc/</link><pubDate>Wed, 20 Apr 2022 15:35:49 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/cginc/</guid><description>摄像机方向 WorldSpaceViewDir 输入一个模型空间中的顶点坐标 -&amp;gt; 输出（世界空间）从这个点到摄像机的观察方向； WorldSpaceViewDir // 内部实现也是用UnityWorldSpaceViewDir // Computes world space view direction, from object space position // *Legacy* Please use UnityWorldSpaceViewDir instead inline float3 WorldSpaceViewDir( in float4 localPos ) { float3 worldPos</description></item><item><title>UnityCG.cginc中常用函数</title><link>https://zfunnily.github.io/2022/04/cginc/</link><pubDate>Wed, 20 Apr 2022 15:35:49 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/cginc/</guid><description>摄像机方向 WorldSpaceViewDir 输入一个模型空间中的顶点坐标 -&amp;gt; 输出（世界空间）从这个点到摄像机的观察方向； WorldSpaceViewDir // 内部实现也是用UnityWorldSpaceViewDir // Computes world space view direction, from object space position // *Legacy* Please use UnityWorldSpaceViewDir instead inline float3 WorldSpaceViewDir( in float4 localPos ) { float3 worldPos</description></item><item><title>《Unity Shader入门精要》第四章笔记 | 学习Shader所需的数学基础</title><link>https://zfunnily.github.io/2022/04/shadermathematic/</link><pubDate>Sun, 10 Apr 2022 15:42:33 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shadermathematic/</guid><description>概述 在学习Shader的过程中，我们最常使用的就是矢量和矩阵（即数学的分支之一——线性代数）。 笛卡儿坐标系 我们使用数学绝大部分都是为了计算位置、距离和角度等变量。而这些计算大部分都是在笛卡儿坐标系 （C</description></item><item><title>《Unity Shader入门精要》第四章笔记 | 学习Shader所需的数学基础</title><link>https://zfunnily.github.io/2022/04/shadermathematic/</link><pubDate>Sun, 10 Apr 2022 15:42:33 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shadermathematic/</guid><description>概述 在学习Shader的过程中，我们最常使用的就是矢量和矩阵（即数学的分支之一——线性代数）。 笛卡儿坐标系 我们使用数学绝大部分都是为了计算位置、距离和角度等变量。而这些计算大部分都是在笛卡儿坐标系 （C</description></item><item><title>《Unity Shader入门精要》第三章笔记| UnityShader基础</title><link>https://zfunnily.github.io/2022/04/shaderbase/</link><pubDate>Sun, 10 Apr 2022 14:51:19 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shaderbase/</guid><description>材质 在Unity中我们需要配合使用材质 （Material） 和Unity Shader才能达到需要的效果。一个最常见的流程是 创建一个材质；活着导入一个材质 创建一个Unity Shader，并把它赋给上一步中</description></item><item><title>《Unity Shader入门精要》第三章笔记| UnityShader基础</title><link>https://zfunnily.github.io/2022/04/shaderbase/</link><pubDate>Sun, 10 Apr 2022 14:51:19 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shaderbase/</guid><description>材质 在Unity中我们需要配合使用材质 （Material） 和Unity Shader才能达到需要的效果。一个最常见的流程是 创建一个材质；活着导入一个材质 创建一个Unity Shader，并把它赋给上一步中</description></item><item><title>《Unity Shader入门精要》第二章笔记 | 渲染流水线</title><link>https://zfunnily.github.io/2022/04/shaderrenderpipline/</link><pubDate>Sat, 09 Apr 2022 11:55:55 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shaderrenderpipline/</guid><description>渲染流水线 Render-Time Rendering, Third Edition》一书中将一个渲染流程分成3个阶段：应用阶段（Application Stage） 、几何阶段（Geometry Stage） 、光栅化阶段（Rasterizer Stage） 。 应</description></item><item><title>《Unity Shader入门精要》第二章笔记 | 渲染流水线</title><link>https://zfunnily.github.io/2022/04/shaderrenderpipline/</link><pubDate>Sat, 09 Apr 2022 11:55:55 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shaderrenderpipline/</guid><description>渲染流水线 Render-Time Rendering, Third Edition》一书中将一个渲染流程分成3个阶段：应用阶段（Application Stage） 、几何阶段（Geometry Stage） 、光栅化阶段（Rasterizer Stage） 。 应</description></item><item><title>shader初尝试 ｜ 给石头覆盖一层雪景(Hello World)</title><link>https://zfunnily.github.io/2022/04/shaderhelloworld/</link><pubDate>Sat, 09 Apr 2022 10:34:56 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shaderhelloworld/</guid><description>给石头覆盖一层雪景 资源准备 石头模型 Unity2021.2.3f1c1 Mac &amp;amp; Windows 在Unity中创建一个项目，导入石头模型，下面就开始利用shader给石头做一个雪景覆盖. 实现效果 未覆盖雪景的样子 覆盖了雪景的样子 开始代码 我在代码中标注了1，</description></item><item><title>shader初尝试 ｜ 给石头覆盖一层雪景(Hello World)</title><link>https://zfunnily.github.io/2022/04/shaderhelloworld/</link><pubDate>Sat, 09 Apr 2022 10:34:56 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shaderhelloworld/</guid><description>给石头覆盖一层雪景 资源准备 石头模型 Unity2021.2.3f1c1 Mac &amp;amp; Windows 在Unity中创建一个项目，导入石头模型，下面就开始利用shader给石头做一个雪景覆盖. 实现效果 未覆盖雪景的样子 覆盖了雪景的样子 开始代码 我在代码中标注了1，</description></item><item><title>UnityShader基本概念</title><link>https://zfunnily.github.io/2022/04/shader01/</link><pubDate>Wed, 06 Apr 2022 11:54:02 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shader01/</guid><description>何为shader shader中文翻译为着色器，其实是一种用来渲染图形的技术，我们可以通过shader编程，来自定义显卡渲染画面的算法，显示我们所期望的结果。 shader种类 顶点着色器: 处理每个顶点，将</description></item><item><title>UnityShader基本概念</title><link>https://zfunnily.github.io/2022/04/shader01/</link><pubDate>Wed, 06 Apr 2022 11:54:02 +0800</pubDate><guid>https://zfunnily.github.io/2022/04/shader01/</guid><description>何为shader shader中文翻译为着色器，其实是一种用来渲染图形的技术，我们可以通过shader编程，来自定义显卡渲染画面的算法，显示我们所期望的结果。 shader种类 顶点着色器: 处理每个顶点，将</description></item></channel></rss>