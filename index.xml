<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zzz</title>
    <link>https://zfunnily.github.io/</link>
    <description>Recent content on Zzz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 21 Oct 2021 10:06:39 +0800</lastBuildDate><atom:link href="https://zfunnily.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Skynet源码赏析四 | 消息调度</title>
      <link>https://zfunnily.github.io/post/skynet/skynet%E5%9B%9B/</link>
      <pubDate>Thu, 21 Oct 2021 10:06:39 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/skynet/skynet%E5%9B%9B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Skynet源码赏析三 | 服务启动</title>
      <link>https://zfunnily.github.io/post/skynet/skynet%E4%B8%89/</link>
      <pubDate>Wed, 20 Oct 2021 11:26:07 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/skynet/skynet%E4%B8%89/</guid>
      <description>skynet启动一个C服务 查看怎么启动C服务的最好的办法是打断点，看源码。 启动logger日志服务 我拿日志服务来举例子，怎么启动日志服务的呢？ 传参数name = &amp;quot;logger&amp;quot;, param = null， struct skynet_context *ctx = skynet_context_new(config-&amp;gt;logservice, config-&amp;gt;logger);; 从modules服务模块中取出名字为 logger的服务, struct skynet_module * result = _query(name);; 如果找不到则从cpath目</description>
    </item>
    
    <item>
      <title>Skynet源码赏析二 | 基础数据结构</title>
      <link>https://zfunnily.github.io/post/skynet/skynet%E4%BA%8C/</link>
      <pubDate>Tue, 19 Oct 2021 18:47:45 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/skynet/skynet%E4%BA%8C/</guid>
      <description>module管理模块 我们所写的C服务编译成.so文件后放在cpath变量路径下，程序会加载路径cpath = root..&amp;quot;cservice/?.so&amp;quot;下的.so文件，通过static void * _try_open(struct modules *m, const char * name)函数第一次打开，然后被加载到全局变量static struct modules *</description>
    </item>
    
    <item>
      <title>Skynet源码赏析一 | 启动初始化的过程</title>
      <link>https://zfunnily.github.io/post/skynet/skynet%E4%B8%80/</link>
      <pubDate>Tue, 19 Oct 2021 17:28:45 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/skynet/skynet%E4%B8%80/</guid>
      <description>入口文件 skynet_main.c 加载配置 1 2 3 4 5 6 7 8 9 struct skynet_config config; config.thread = optint(&amp;#34;thread&amp;#34;,8); config.module_path = optstring(&amp;#34;cpath&amp;#34;,&amp;#34;./cservice/?.so&amp;#34;); config.harbor = optint(&amp;#34;harbor&amp;#34;, 1); config.bootstrap = optstring(&amp;#34;bootstrap&amp;#34;,&amp;#34;snlua bootstrap&amp;#34;); config.daemon = optstring(&amp;#34;daemon&amp;#34;, NULL); config.logger = optstring(&amp;#34;logger&amp;#34;, NULL); config.logservice = optstring(&amp;#34;logservice&amp;#34;, &amp;#34;logger&amp;#34;); config.profile = optboolean(&amp;#34;profile&amp;#34;, 1); 从上述代码可以看到，配置都已经加载到变量struct skynet_config config;中了。 初始化 初始化skynet_context管理模块, skynet_handle_init(config-&amp;gt;harbor);; 初始化static struct global_queue *Q消息队列, skynet_mq_init();; 初始化stat</description>
    </item>
    
    <item>
      <title>golang调用带有后台进程shell脚本可能会被挂起</title>
      <link>https://zfunnily.github.io/post/golang/shell/</link>
      <pubDate>Wed, 13 Oct 2021 17:15:45 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/golang/shell/</guid>
      <description>起因 今天用golang写一个调用外部shell脚本的程序，使用 exec.Command方法，这段脚本代码中包含了一个后台任务语句。 结果发生了一个问题：cmd.Output 始终不会返回，一直挂起。导致我的Go程序也挂起了。 问题还原 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //main.go package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os/exec&amp;#34; ) func</description>
    </item>
    
    <item>
      <title>英语学习</title>
      <link>https://zfunnily.github.io/post/thinking/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 12 Oct 2021 14:36:25 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/thinking/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/</guid>
      <description>缘由 英文像一座大山，下定决心想要跨过去，可迟迟不的法门。，今天看到一片文章怎么开始并坚持读英文原著, 里面有句话： &amp;ldquo;拖延症怎么坚持下去&amp;ndash;每天控制在10-20页，保持在一个阅读的状态是最重要的。&amp;rdquo; 看到这里 想到以前的n+1和日拱一卒，其实是一个意思。</description>
    </item>
    
    <item>
      <title>经济学书籍</title>
      <link>https://zfunnily.github.io/post/read/economics/</link>
      <pubDate>Tue, 14 Sep 2021 19:06:01 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/read/economics/</guid>
      <description>经济学入门 经济学原理 宏观+微观，[美] 曼昆（N.GregoryMankiw） ，北京大学出版社，【第一篇 导言；第4章、第6章；第10章、第11章；第23章、第24章；第25章】 牛奶可乐经济学，[美] 罗伯特·，弗兰克 著；闾佳 译，北京联合出版公司，【全书，以前五章为主】 经济学的思维方式</description>
    </item>
    
    <item>
      <title>FPS游戏 实现移动功能</title>
      <link>https://zfunnily.github.io/post/game/fps/move/</link>
      <pubDate>Sun, 12 Sep 2021 20:43:34 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/game/fps/move/</guid>
      <description>三种实现FPS Controller的区别 Transform Translate 允许移动物理，但无物理碰撞 Rigid body + Capsule Collider 符合物理学 不会鬼穿墙 无法滞空运动 可与Physics Object 交互 Charactor Controller 不会鬼穿墙 提供的API相对多 无法与Physic objects互动 可以滞空运动(太空人) 提供多种运动效果例如 slopes steps 等 Rigid body + Capsule Collider 控制摄像头旋转 FPMouseLook.cs 跟</description>
    </item>
    
    <item>
      <title>免费Music</title>
      <link>https://zfunnily.github.io/post/free/music/</link>
      <pubDate>Wed, 08 Sep 2021 14:47:14 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/free/music/</guid>
      <description>介绍一个可以免费听音乐的方法 环境 docker mac 安装 $ docker run -d -p 264:264 -p 9000:9000 -v $dir_name:/var/www/html/cache --name music oldiy/music-player-docker $dir_name 是 你自己宿主机的目录。可以自定义 访问：127.0.0.1:264 就可以放心使用， 同事推荐的，贼好用。</description>
    </item>
    
    <item>
      <title>U3D Transform类</title>
      <link>https://zfunnily.github.io/post/unity3D/transform%E7%B1%BB/</link>
      <pubDate>Tue, 07 Sep 2021 15:55:59 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/unity3D/transform%E7%B1%BB/</guid>
      <description>Transform类 在unity中，把transform类理解为，transform类是在每个对象生成时自动附加的一个类。在Unity的视图中，点击Hierarchy中的对象，就可以在Inspector中可以看到存在Transform的组件。 属性 Position（坐标） Rotat</description>
    </item>
    
    <item>
      <title>Vim 输入模式 语言改变</title>
      <link>https://zfunnily.github.io/post/linux/vim_change_language/</link>
      <pubDate>Tue, 07 Sep 2021 10:46:58 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/linux/vim_change_language/</guid>
      <description>vim 在退出输入模式的时候切换为原来的输入法 在敲代码的时候使用我们使用的英文，当遇到问题，我们需要搜索引擎的时候需要中文输入法，这个时候，自动切换输入法可以帮助我们节省手动切换输入法的时间。 跟编辑器结合，主要是两种编辑器，一个是 idea 一个是 vscode 在idea中使用 vim 插件： IdeaVim IdeaVimExtension 我们需要在 用户目录</description>
    </item>
    
    <item>
      <title>linue Screen</title>
      <link>https://zfunnily.github.io/post/linux/screen/</link>
      <pubDate>Tue, 07 Sep 2021 10:02:16 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/linux/screen/</guid>
      <description>screen命令 screen 是一个非常有用的命令。应用场景： 单个 SSH 会话中使用多个 shell 窗口（会话）的能力 服务器开发，一个单独运行进程的窗口。可以避免单独再开一个窗口。 &amp;hellip; screen使用 创建一个窗口 1 $ screen -S name 执行自己需要的命令 $ ... 分离窗口 ctrl + A + D 重新连接到screen 如果只有一个会话可以直接使</description>
    </item>
    
    <item>
      <title>U3D PhysicalSystem</title>
      <link>https://zfunnily.github.io/post/unity3D/physicalSystem/</link>
      <pubDate>Mon, 06 Sep 2021 11:23:30 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/unity3D/physicalSystem/</guid>
      <description>U3D物理系统 刚体(Rigidbody)、碰撞体(Colliders)、触发器 参照 Unity 官方文档的以下几篇文章，重新进行了整理。 PhysicsOverview Rigidbody2D Rigidbody 物理的碰撞条件 Unity3D内置物理引擎，可以模拟物理效果。典型的一个物理效果就是碰撞。 两个物体发生物理碰撞的必要条件是：两个物体都带有Collide</description>
    </item>
    
    <item>
      <title>重力摩托项目</title>
      <link>https://zfunnily.github.io/post/game/BalanceMoto/</link>
      <pubDate>Mon, 06 Sep 2021 07:20:45 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/game/BalanceMoto/</guid>
      <description>重力摩托 自己在网上找的一个视频教程：https://www.bilibili.com/video/BV1ix411U7HD?p=2 环境 Unity3D 开始 新建一个2D项目</description>
    </item>
    
    <item>
      <title>Centos7.2的gcc4.8升级为4.9</title>
      <link>https://zfunnily.github.io/post/linux/gcc%E5%8D%87%E7%BA%A7/</link>
      <pubDate>Wed, 01 Sep 2021 18:13:41 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/linux/gcc%E5%8D%87%E7%BA%A7/</guid>
      <description>环境 CentOS 7.2.1511 Docker 我是用 docker 拉取镜像 CentOS 7.2.1511, 利用容器来作为我的开发环境。有条件的也可以用虚拟机或者实体机器。原理都一样。 1 2 $ docker $ yum update &amp;amp;&amp;amp; yum install gcc gcc-c++ make zlib-devel.x86_6 下载依赖包 升级 gcc， 下载安装包下载依赖。 1 2 3 $ wget http://ftp.gnu.org/gnu/gcc/gcc-4.9.3/gcc-4.9.3.tar.bz2 $ tar xfv gcc-4.9.3.tar.bz2 &amp;amp;&amp;amp; cd gcc-4.9.3 $ ./contrib/download_prerequisites 如果连接失败，无法下载的话，就打开此文件，手动下载下面5个文件，然后将文件</description>
    </item>
    
    <item>
      <title>shell Except 使用</title>
      <link>https://zfunnily.github.io/post/shell/except/</link>
      <pubDate>Mon, 30 Aug 2021 17:13:33 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/shell/except/</guid>
      <description>Except 参数 1 2 3 4 5 6 7 8 9 10 11 12 spawn 交互程序开始后面跟命令或者指定程序 expect 获取匹配信息匹配成功则执行expect后面的程序动作 send exp_send 用于发送指定的字符串信息 exp_continue 在expect中多次匹配就需要用到 send_user 用来打印输出 相当于shell中的echo exit 退出expect脚本 eof expect执行结束 退出 set 定义</description>
    </item>
    
    <item>
      <title>U3D UGUI</title>
      <link>https://zfunnily.github.io/post/unity3D/UGUI/</link>
      <pubDate>Fri, 20 Aug 2021 14:15:41 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/unity3D/UGUI/</guid>
      <description>Text Text的属性 在 Unity 的 Hierarchy 面板上右键–&amp;gt;UI–&amp;gt;Text, 在 Inspector 面板上查看属性 属性 功能 Text 需要显示的文本 Font 显示文本的字体 如：微软雅黑，宋体等 Font Style 显示文本的样式，有普通，粗体，斜体，粗体和斜体四种选项 Font Size 显示字体的大小 Line Spacing 行与行之间的垂直距离 Alignment 文本的水平和垂直方向的对齐方式 Align</description>
    </item>
    
    <item>
      <title>golang操作redis</title>
      <link>https://zfunnily.github.io/post/golang/go_redis/</link>
      <pubDate>Thu, 03 Jun 2021 15:57:14 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/golang/go_redis/</guid>
      <description>概述 网上有很多golang操作redis的例子，我使用github.com/gomodule/redigo/redis包写一个关于redis分布式锁的问题。 redis分布式锁 锁需要的几个组件 获取锁 删除锁 分布式锁还需要 给锁加上唯一id (只能获取和删除自己的锁) 给锁加上过期时间 (防止</description>
    </item>
    
    <item>
      <title>Auto_findroad</title>
      <link>https://zfunnily.github.io/post/game/auto_findroad/</link>
      <pubDate>Thu, 20 May 2021 17:39:34 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/game/auto_findroad/</guid>
      <description>自动寻路 有限状态机器 行为树</description>
    </item>
    
    <item>
      <title>Lua next 的使用</title>
      <link>https://zfunnily.github.io/post/lua_api/lua_next/</link>
      <pubDate>Mon, 10 May 2021 16:39:50 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/lua_api/lua_next/</guid>
      <description>lua_next lua_next(L,index)：先把 表(lua栈 index所指的表), 的当前索引弹出，再把table 当前索引的值弹出，也就是先弹出 table的索引，再弹出table索引的值 举例： local t = { [&amp;quot;a&amp;quot;] = 1, [&amp;quot;b&amp;quot;] = 2, [&amp;quot;c&amp;quot;] = 3 } 使用lua_next遍历table t 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>Lua的api</title>
      <link>https://zfunnily.github.io/post/lua_api/lua_settop%E5%92%8Clua_pop/</link>
      <pubDate>Mon, 10 May 2021 15:57:03 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/post/lua_api/lua_settop%E5%92%8Clua_pop/</guid>
      <description>lua_pop和lua_settop lua_settop 我们直接来看lua_settop，文档解释 /* 设置栈的高度，如果之前的栈顶比新设置的更高，那么高出来的元素会被丢弃，反之压入nil来补足大小 假设栈里有2个元素。 如果index=0，那么移除栈上所有元素 如果index=1，移除栈顶一个元素 如果in</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://zfunnily.github.io/post/hugo/hugo/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/post/hugo/hugo/</guid>
      <description>hugo 我用过的静态博客有hexo、jekyll和hugo，对比起来，hugo虽然没有hexo那样丰富的插件和主题，但是hugo生成文章的速度更快。我是一名go语言爱好者，而hugo是go语言开发的, jekyll是用ruby开发的。于是我选择了hugo。下面我把hugo的安装步骤记录下</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://zfunnily.github.io/about/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/about/</guid>
      <description>Who am I 我是一名游戏从业者，刚从IM领域转到游戏领域. 目前在一家公司做游戏后段的工作. Skill skynet框架 &amp;ndash; 游戏后端 C/C++ &amp;ndash; IM服务器 Golang &amp;ndash; 后端 lua &amp;ndash; 游戏后端</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://zfunnily.github.io/archives/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://zfunnily.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
