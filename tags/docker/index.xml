<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on 留白</title>
    <link>https://zfunnily.github.io/tags/docker/</link>
    <description>Recent content in docker on 留白</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 28 Nov 2020 13:32:57 +0000</lastBuildDate><atom:link href="https://zfunnily.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker | 容器退出码详解</title>
      <link>https://zfunnily.github.io/2020/11/Docker%E5%AE%B9%E5%99%A8%E9%80%80%E5%87%BA%E7%A0%81%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 28 Nov 2020 13:32:57 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/11/Docker%E5%AE%B9%E5%99%A8%E9%80%80%E5%87%BA%E7%A0%81%E8%AF%A6%E8%A7%A3/</guid>
      <description>docker查看退出码指令 $ docker ps --filter &amp;quot;status=exited&amp;quot; $ docker inspect container-id --format=&#39;{&amp;lt;!-- --&amp;gt;{.State.ExitCode}}&#39; 常见退出码 Exit Code 0 退出代码0表示特定容器没有附加前台进程。- 该退出代码是所有其他后续退出代码的例外。- 这不一定意味着发生了不好的事情。如果开发人员想要在容器完成其工作后自动停止其容器，则使用此退出代码。 Exit Code 1 程序错误，或者Docker</description>
    </item>
    
    <item>
      <title>K8S | Ingress的基本使用</title>
      <link>https://zfunnily.github.io/2020/08/ingress/</link>
      <pubDate>Sat, 15 Aug 2020 00:05:15 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/08/ingress/</guid>
      <description>缘由 看了statefulset基础教程的基础教程，并且把环境搭建起来后。pod内部是可以连通了。但是我不知道怎么去从外部访问。在网上搜索一番，通过Ingress可以作为集群的入口。遂记录之。 结合Statefulset的示例进行配置。这是未配置Ingress之前的Statefuls</description>
    </item>
    
    <item>
      <title>K8S | Statefluset的持久存储PVC</title>
      <link>https://zfunnily.github.io/2020/08/pvc/</link>
      <pubDate>Fri, 14 Aug 2020 17:18:58 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/08/pvc/</guid>
      <description>缘由 在看statefluset基础教程的时候遇到pod状态为pending kubectl describe pod web-0 日志内容是 pod has unbound immediate PersistentVolumeClaims 于是就对PV和PVC进行研究。 有给出完整的 web.yaml查看最下面的完整示例。但是我建议先把PV和PVC的概念弄懂了，还有学会查看pod的描述kubectl describe pod podname或</description>
    </item>
    
    <item>
      <title>K8S | 创建第一个应用</title>
      <link>https://zfunnily.github.io/2020/08/firstk8s/</link>
      <pubDate>Thu, 13 Aug 2020 15:28:31 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/08/firstk8s/</guid>
      <description>使用k8s部署第一个应用 创建一个nginx.yaml文件 apiVersion: v1 kind: Pod metadata: name: nginx # 指定 label，便于检索 labels: app: nginx spec: containers: - name: nginx # 指定镜像 image: nginx:alpine # 指定暴露端口 ports: - containerPort: 80 --- # 创建网络服务 apiVersion: v1 kind: Service metadata: name: kube-node-service labels: name: kube-node-service spec: type: NodePort #这里代表是NodePort类型的 ports: - port: 80 #这里的端口和clusterIP(10.97.1</description>
    </item>
    
    <item>
      <title>Docker | 远程访问加密</title>
      <link>https://zfunnily.github.io/2020/08/dockersecret/</link>
      <pubDate>Fri, 07 Aug 2020 07:56:52 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/08/dockersecret/</guid>
      <description>docker的远程访问 方法一 ：编辑docker.service文件 编辑docker.service文件 sudo vim /lib/systemd/system/docker.service 修改ExecStart行为下面内容 ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock 重新加载docker配置 sudo systemctl daemon-reload // 1，加载docker守护线程 sudo systemctl restart docker // 2，重启docker 方法二：修改daemon.json的配</description>
    </item>
    
    <item>
      <title>Docker | web管理界面portainer</title>
      <link>https://zfunnily.github.io/2020/08/dockerweb/</link>
      <pubDate>Fri, 07 Aug 2020 07:54:43 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/08/dockerweb/</guid>
      <description>拉取镜像 $ docker pull portainer/portainer 运行启动portainer docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v /home/docker/portainer:/data --name portainer --restart=always portainer/portainer admin bigant.cn 汉化 Portainer-CN.zip 百度云盘: https://pan.baidu.com/s/13ra6jXHR_7vajLLlf5GVEw 提取码: nzue 新建文件夹命名为public，把Portainer-CN.zip解压至里面。 2、public文件夹传输至系统根目录 3、然后按需执行以下命令 x86-64系统使用 docker volume create portainer_data docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock</description>
    </item>
    
    <item>
      <title>K8S | 集群资源监控 heapster</title>
      <link>https://zfunnily.github.io/2020/08/heapster/</link>
      <pubDate>Thu, 06 Aug 2020 09:06:05 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/08/heapster/</guid>
      <description>安装heapster的原因 查看dashboard状态 $ sudo kubectl get pods --all-namespaces | grep dashboard kubernetes-dashboard dashboard-metrics-scraper-6b4884c9d5-mvnb9 1/1 Running 0 40m kubernetes-dashboard kubernetes-dashboard-d7f7f565d-zhpsc 1/1 Running 0 40m 查看dashboard的日志 $ sudo kubectl logs -f -n kubernetes-dashboard kubernetes-dashboard-d7f7f565d-zhpsc 日志遇到这样的情况 No metric client provided. Skipping metrics. 2020/08/03 09:02:22 [2020-08-03T09:02:22Z] Outcoming response to 192.168.84.241:40086 with 200 status code 2020/08/03 09:02:23 Metric client health check failed: the server is currently unable to handle the request (get services dashboard-metrics-scraper). Retrying in 30 seconds. 下载heapster的代码 直接现在Githu</description>
    </item>
    
    <item>
      <title>K8S | Dashboard界面管理</title>
      <link>https://zfunnily.github.io/2020/08/dashboard/</link>
      <pubDate>Thu, 06 Aug 2020 09:04:14 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/08/dashboard/</guid>
      <description>安装部署Dashboard 通过一下命令来部署, recommended.yaml $ sudo kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml这个地址却很难打开，如果能打开，直接执行即</description>
    </item>
    
    <item>
      <title>K8S | 安装</title>
      <link>https://zfunnily.github.io/2020/08/k8sinstall/</link>
      <pubDate>Wed, 05 Aug 2020 10:00:40 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/08/k8sinstall/</guid>
      <description>安装k8s前的准备工作 环境 ubuntu18.04 docker 关闭 swap 暂时关闭 $ swapoff -a 永久关闭 注释掉这一行 sudo vim /etc/fstab # /swapfile none swap sw 0 0 重启机器 sudo reboot docker 的配置 安装完成之后需要进行一些配置，包括 切换docker下载源为国内镜像站 以及 修改cgroups。 cgroups是一个进程隔离工具 docker就是用它来实现容器的隔离的。doc</description>
    </item>
    
  </channel>
</rss>
