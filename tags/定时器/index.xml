<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>定时器 on Zzz记忆</title><link>https://zfunnily.github.io/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/</link><description>Recent content in 定时器 on Zzz记忆</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 20 Mar 2024 00:59:34 +0000</lastBuildDate><atom:link href="https://zfunnily.github.io/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>层级时间轮 ｜ skynet 定时器</title><link>https://zfunnily.github.io/2022/03/timerskynet/</link><pubDate>Sun, 27 Mar 2022 12:39:12 +0800</pubDate><guid>https://zfunnily.github.io/2022/03/timerskynet/</guid><description>skynet定时器 要解析一个程序代码，先了解数据结构，这是基础，再看函数。 拿skynet定时器举例子。 数据结构 //定时器事件 用于抛出定时器事件到消息队列里。理解这个数据结构需要先了解skynet的框架</description></item><item><title>层级时间轮 ｜ skynet 定时器</title><link>https://zfunnily.github.io/2022/03/timerskynet/</link><pubDate>Sun, 27 Mar 2022 12:39:12 +0800</pubDate><guid>https://zfunnily.github.io/2022/03/timerskynet/</guid><description>skynet定时器 要解析一个程序代码，先了解数据结构，这是基础，再看函数。 拿skynet定时器举例子。 数据结构 //定时器事件 用于抛出定时器事件到消息队列里。理解这个数据结构需要先了解skynet的框架</description></item><item><title>利用时间轮实现定时器</title><link>https://zfunnily.github.io/2022/03/timer/</link><pubDate>Thu, 10 Mar 2022 14:38:23 +0800</pubDate><guid>https://zfunnily.github.io/2022/03/timer/</guid><description>理解定时器 适用场景 定时任务(每隔1s钟打印一次数据) 超时控制(xx分钟没有动作就断开连接) 频率限制(最快只能每5s调用一次API) 定时器常用的数据结构有如下几种： 链表 双向有序链表 最小堆 时间轮 层级时间轮</description></item><item><title>利用时间轮实现定时器</title><link>https://zfunnily.github.io/2022/03/timer/</link><pubDate>Thu, 10 Mar 2022 14:38:23 +0800</pubDate><guid>https://zfunnily.github.io/2022/03/timer/</guid><description>理解定时器 适用场景 定时任务(每隔1s钟打印一次数据) 超时控制(xx分钟没有动作就断开连接) 频率限制(最快只能每5s调用一次API) 定时器常用的数据结构有如下几种： 链表 双向有序链表 最小堆 时间轮 层级时间轮</description></item></channel></rss>