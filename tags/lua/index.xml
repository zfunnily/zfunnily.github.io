<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lua on Zzz记忆</title>
    <link>https://zfunnily.github.io/tags/lua/</link>
    <description>Recent content in lua on Zzz记忆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 23 Dec 2021 16:37:44 +0800</lastBuildDate>
    
	<atom:link href="https://zfunnily.github.io/tags/lua/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A*算法 | Lua版本</title>
      <link>https://zfunnily.github.io/2021/12/astar/</link>
      <pubDate>Thu, 23 Dec 2021 16:37:44 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/2021/12/astar/</guid>
      <description>A*算法思路 寻路步骤 从起点A开始, 把它作为待处理的方格存入一个&amp;quot;开启列表&amp;rdquo;, 开启列表就是一个等待检查方格的列表. 寻找起点A周围可以到达的方格, 将它们放入&amp;quot;开启列表&amp;rd</description>
    </item>
    
    <item>
      <title>Golang | redis实现分布式锁</title>
      <link>https://zfunnily.github.io/2021/06/distribute/</link>
      <pubDate>Thu, 03 Jun 2021 16:12:21 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2021/06/distribute/</guid>
      <description>概述 网上有很多Golang操作redis的例子，我使用github.com/gomodule/redigo/redis包写一个关于redis分布式锁的问题。 redis分布式锁 锁需要的几个组件 获取锁- 删</description>
    </item>
    
    <item>
      <title>Lua | 解决百元买鸡的问题</title>
      <link>https://zfunnily.github.io/2021/02/chicken/</link>
      <pubDate>Wed, 24 Feb 2021 17:51:46 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2021/02/chicken/</guid>
      <description>问题 编写lua程序求解百鸡百钱问题。公鸡5元一只，母鸡3元一只，小鸡一元3只，问100元钱买100只鸡，可买公鸡、母鸡、小鸡各多少只？ 代码 ----------------------------------------------------------------------------- --公鸡5元一只，母鸡3元一只，小鸡一元3只，问100元钱买</description>
    </item>
    
    <item>
      <title>Lua | 调用C/C&#43;&#43;的动态库</title>
      <link>https://zfunnily.github.io/2021/02/dynamic/</link>
      <pubDate>Sat, 20 Feb 2021 11:11:51 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2021/02/dynamic/</guid>
      <description>概述 最近在学习 云风的skynet库，想自定义一个模块，目标是使用lua调用C/C++所编写的库。 当我们需要在Lua里面调用c/c++函数时，所有的函数都必须满足以下函数签名： typedef int (*lua_CFunction) (lua_State *L); 换句话说，所有的</description>
    </item>
    
    <item>
      <title>Skynet | lua-protobuf</title>
      <link>https://zfunnily.github.io/2021/01/skynetprotobuf/</link>
      <pubDate>Mon, 25 Jan 2021 14:25:07 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2021/01/skynetprotobuf/</guid>
      <description>概述 在最新的skynet中我使用的是云风的pbc库来解析protobuf，该项目中的一个文件protobuf.lua 使用了module语法在lua5.1版本中已经删除，最新的skynet是lua5.4</description>
    </item>
    
    <item>
      <title>Openresty二 | postman小工具</title>
      <link>https://zfunnily.github.io/2020/11/%E4%BD%BF%E7%94%A8OpenResty%E5%81%9A%E4%B8%80%E4%B8%AApostman%E5%B0%8F%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 25 Nov 2020 16:30:39 +0800</pubDate>
      
      <guid>https://zfunnily.github.io/2020/11/%E4%BD%BF%E7%94%A8OpenResty%E5%81%9A%E4%B8%80%E4%B8%AApostman%E5%B0%8F%E5%B7%A5%E5%85%B7/</guid>
      <description>用到的知识点 mvc架构 模型渲染库：https://github.com/bungle/lua-resty-template resty http请求库： https://github.com/bungle/lua-resty-template 参照 mvc模型来做postman工具 配置文件说明 worker_processes 1; error_log logs/error.log; events</description>
    </item>
    
  </channel>
</rss>