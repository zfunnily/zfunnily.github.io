<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grpc on 留白</title>
    <link>https://zfunnily.github.io/tags/grpc/</link>
    <description>Recent content in grpc on 留白</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 22 Jan 2021 16:41:16 +0000</lastBuildDate><atom:link href="https://zfunnily.github.io/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Protobuf | 请求参数为空的案例</title>
      <link>https://zfunnily.github.io/2021/01/pbempty/</link>
      <pubDate>Fri, 22 Jan 2021 16:41:16 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2021/01/pbempty/</guid>
      <description>参数为空的grpc请求怎么定义 google protobuf已经提供了空参数 //empty.proto message Empty {&amp;lt;!-- --&amp;gt;} 使用方法，在proto文件中导入empty.proto, 定义一个请求参数和返回值为空的函数emptyfunction， 函数名字可以自定义。 //server.proto import &amp;quot;google/protobuf/empty.proto&amp;quot;; service pbservice{ rpc emptyfunction(google.protobuf.Empty) return{google.protobuf.Empty} } 以golang语言为例子，在go中对应的函数为： func</description>
    </item>
    
    <item>
      <title>Golang的grpc</title>
      <link>https://zfunnily.github.io/2020/12/Golang%E7%9A%84grpc/</link>
      <pubDate>Sun, 13 Dec 2020 09:10:42 +0000</pubDate>
      
      <guid>https://zfunnily.github.io/2020/12/Golang%E7%9A%84grpc/</guid>
      <description>OverView gRPC是由Google主导开发的RPC框架，使用HTTP/2协议并用ProtoBuf作为序列化工具。其客户端提供Objective-C、Java接口，服务器侧则有Java、Golang、C++等接口，从而为移动端（iOS/Androi）到服务器端通讯提供了一种解决方案。 当然在</description>
    </item>
    
  </channel>
</rss>
